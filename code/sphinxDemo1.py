#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.1f
#  in conjunction with Tcl version 8.6
#    May 01, 2024 07:11:12 AM CDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import sphinxDemo1_support

_bgcolor = 'cornsilk4'
_fgcolor = 'black'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: sphinxDemo1_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'page-cornsilkdark.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('page-cornsilkdark')
    style.configure('.', font = "-family {DejaVu Sans} -size 10")
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1000x689+767+357")
        top.minsize(1, 1)
        top.maxsize(4225, 1410)
        top.resizable(0,  0)
        top.title("Sphinx Demo 1")
        top.configure(background="cornsilk4")
        top.configure(highlightbackground="cornsilk4")
        top.configure(highlightcolor="black")

        self.top = top
        self.comboThemes = tk.StringVar()
        self.StatusTime = tk.StringVar()
        self.StatusInfo1 = tk.StringVar()
        self.StatusInfo2 = tk.StringVar()

        _style_code()
        self.FrameBar = ttk.Frame(self.top)
        self.FrameBar.place(x=2, y=2, height=55, width=996)
        self.FrameBar.configure(relief='sunken')
        self.FrameBar.configure(borderwidth="2")
        self.FrameBar.configure(relief="sunken")

        self.btnAbout = ttk.Button(self.FrameBar)
        self.btnAbout.place(x=828, y=3, height=42, width=42)
        self.btnAbout.configure(command=sphinxDemo1_support.on_btnAbout)
        photo_location = os.path.join(_location,"./graphics/information.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.btnAbout.configure(image=_img0)
        self.btnAbout.configure(style='Toolbutton')
        self.btnAbout_tooltip = \
        ToolTip(self.btnAbout, '''About''')

        self.btnHelp = ttk.Button(self.FrameBar)
        self.btnHelp.place(x=890, y=3, height=42, width=42)
        self.btnHelp.configure(command=sphinxDemo1_support.on_btnHelp)
        photo_location = os.path.join(_location,"./graphics/question.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.btnHelp.configure(image=_img1)
        self.btnHelp.configure(style='Toolbutton')
        self.btnHelp_tooltip = \
        ToolTip(self.btnHelp, '''Help''')

        self.btnExit = ttk.Button(self.FrameBar)
        self.btnExit.place(x=947, y=3, height=42, width=42)
        self.btnExit.configure(command=sphinxDemo1_support.on_btnExit)
        photo_location = os.path.join(_location,"./graphics/system-shutdown.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.btnExit.configure(image=_img2)
        self.btnExit.configure(style='Toolbutton')
        self.btnExit_tooltip = \
        ToolTip(self.btnExit, '''Exit''')

        self.TLabel1 = ttk.Label(self.FrameBar)
        self.TLabel1.place(x=200, y=10, height=24, width=198)
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='e')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Available Themes:''')
        self.TLabel1.configure(compound='left')

        self.TComboboxThemes = ttk.Combobox(self.FrameBar)
        self.TComboboxThemes.place(x=410, y=10, height=24, width=200)
        self.TComboboxThemes.configure(exportselection="0")
        self.TComboboxThemes.configure(font="-family {DejaVu Sans} -size 10")
        self.TComboboxThemes.configure(textvariable=self.comboThemes)

        self.FrameStatus = ttk.Frame(self.top)
        self.FrameStatus.place(x=2, y=632, height=55, width=996)
        self.FrameStatus.configure(relief='sunken')
        self.FrameStatus.configure(borderwidth="2")
        self.FrameStatus.configure(relief="sunken")

        self.LabelStatusTime = ttk.Label(self.FrameStatus)
        self.LabelStatusTime.place(x=824, y=2, height=50, width=168)
        self.LabelStatusTime.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.LabelStatusTime.configure(relief="sunken")
        self.LabelStatusTime.configure(anchor='center')
        self.LabelStatusTime.configure(justify='left')
        self.LabelStatusTime.configure(textvariable=self.StatusTime)
        self.StatusTime.set('''''')
        self.LabelStatusTime.configure(compound='left')

        self.LabelStatusInfo1 = ttk.Label(self.FrameStatus)
        self.LabelStatusInfo1.place(x=2, y=2, height=50, width=423)
        self.LabelStatusInfo1.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.LabelStatusInfo1.configure(relief="sunken")
        self.LabelStatusInfo1.configure(anchor='center')
        self.LabelStatusInfo1.configure(justify='left')
        self.LabelStatusInfo1.configure(textvariable=self.StatusInfo1)
        self.StatusInfo1.set('''''')
        self.LabelStatusInfo1.configure(compound='left')

        self.LabelStatusInfo2 = ttk.Label(self.FrameStatus)
        self.LabelStatusInfo2.place(x=425, y=2, height=50, width=398)
        self.LabelStatusInfo2.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.LabelStatusInfo2.configure(relief="sunken")
        self.LabelStatusInfo2.configure(anchor='center')
        self.LabelStatusInfo2.configure(justify='left')
        self.LabelStatusInfo2.configure(textvariable=self.StatusInfo2)
        self.StatusInfo2.set('''''')
        self.LabelStatusInfo2.configure(compound='left')

        self.FrameMain = ttk.Frame(self.top)
        self.FrameMain.place(x=2, y=57, height=575, width=996)
        self.FrameMain.configure(relief='sunken')
        self.FrameMain.configure(borderwidth="2")
        self.FrameMain.configure(relief="sunken")

        self.TLabel2 = ttk.Label(self.FrameMain)
        self.TLabel2.place(x=92, y=81, height=22, width=130)
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='e')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''First Name:''')
        self.TLabel2.configure(compound='left')

        self.TLabel3 = ttk.Label(self.FrameMain)
        self.TLabel3.place(x=92, y=120, height=22, width=130)
        self.TLabel3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='e')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Middle Initial:''')
        self.TLabel3.configure(compound='left')

        self.TLabel4 = ttk.Label(self.FrameMain)
        self.TLabel4.place(x=92, y=161, height=22, width=130)
        self.TLabel4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='e')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''Last Name:''')
        self.TLabel4.configure(compound='left')

        self.TLabel5 = ttk.Label(self.FrameMain)
        self.TLabel5.place(x=90, y=20, height=22, width=130)
        self.TLabel5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='e')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Emp ID:''')
        self.TLabel5.configure(compound='left')

        self.btnFind = ttk.Button(self.FrameMain)
        self.btnFind.place(x=430, y=10, height=42, width=42)
        self.btnFind.configure(command=sphinxDemo1_support.on_btnFind)
        photo_location = os.path.join(_location,"./graphics/edit-find.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.btnFind.configure(image=_img3)
        self.btnFind.configure(compound='left')
        self.btnFind.configure(style='Toolbutton')
        self.btnFind_tooltip = \
        ToolTip(self.btnFind, '''Find''')

        self.btnEdit = ttk.Button(self.FrameMain)
        self.btnEdit.place(x=610, y=10, height=40, width=42)
        self.btnEdit.configure(command=sphinxDemo1_support.on_btnEdit)
        photo_location = os.path.join(_location,"./graphics/accessories-text-editor.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.btnEdit.configure(image=_img4)
        self.btnEdit.configure(compound='left')
        self.btnEdit.configure(style='Toolbutton')
        self.btnEdit_tooltip = \
        ToolTip(self.btnEdit, '''Edit Record''')

        self.btnSave = ttk.Button(self.FrameMain)
        self.btnSave.place(x=684, y=10, height=42, width=42)
        self.btnSave.configure(command=sphinxDemo1_support.on_btnSave)
        photo_location = os.path.join(_location,"./graphics/media-floppy.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.btnSave.configure(image=_img5)
        self.btnSave.configure(compound='left')
        self.btnSave.configure(style='Toolbutton')
        self.btnSave_tooltip = \
        ToolTip(self.btnSave, '''Save''')

        self.btnDelete = ttk.Button(self.FrameMain)
        self.btnDelete.place(x=751, y=10, height=42, width=42)
        self.btnDelete.configure(command=sphinxDemo1_support.on_btnDelete)
        photo_location = os.path.join(_location,"./graphics/edit-delete.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.btnDelete.configure(image=_img6)
        self.btnDelete.configure(compound='left')
        self.btnDelete.configure(style='Toolbutton')
        self.btnDelete_tooltip = \
        ToolTip(self.btnDelete, '''Delete''')

        self.TEntry4 = ttk.Entry(self.FrameMain)
        self.TEntry4.place(x=230, y=20, height=24, width=186)
        self.TEntry4.configure(exportselection="0")
        self.TEntry4.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry4.configure(cursor="xterm")
        if (sphinxDemo1_support.root.tk.call('tk', 'windowingsystem')=='aqua'):
            self.TEntry4.bind('<Control-1>', lambda e: self. popup1(e,1))
            self.TEntry4.bind('<Button-3>', lambda e: self. popup1(e,1))
        else:
            self.TEntry4.bind('<Button-3>', lambda e: self. popup1(e,1))

        self.TEntry1 = ttk.Entry(self.FrameMain)
        self.TEntry1.place(x=230, y=80, height=24, width=186)
        self.TEntry1.configure(exportselection="0")
        self.TEntry1.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry1.configure(cursor="xterm")
        if (sphinxDemo1_support.root.tk.call('tk', 'windowingsystem')=='aqua'):
            self.TEntry1.bind('<Control-1>', lambda e: self. popup1(e,2))
            self.TEntry1.bind('<Button-3>', lambda e: self. popup1(e,2))
        else:
            self.TEntry1.bind('<Button-3>', lambda e: self. popup1(e,2))

        self.TEntry2 = ttk.Entry(self.FrameMain)
        self.TEntry2.place(x=230, y=120, height=24, width=186)
        self.TEntry2.configure(exportselection="0")
        self.TEntry2.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry2.configure(cursor="xterm")
        if (sphinxDemo1_support.root.tk.call('tk', 'windowingsystem')=='aqua'):
            self.TEntry2.bind('<Control-1>', lambda e: self. popup1(e,3))
            self.TEntry2.bind('<Button-3>', lambda e: self. popup1(e,3))
        else:
            self.TEntry2.bind('<Button-3>', lambda e: self. popup1(e,3))

        self.TEntry3 = ttk.Entry(self.FrameMain)
        self.TEntry3.place(x=230, y=160, height=24, width=186)
        self.TEntry3.configure(exportselection="0")
        self.TEntry3.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry3.configure(cursor="xterm")
        if (sphinxDemo1_support.root.tk.call('tk', 'windowingsystem')=='aqua'):
            self.TEntry3.bind('<Control-1>', lambda e: self. popup1(e,4))
            self.TEntry3.bind('<Button-3>', lambda e: self. popup1(e,4))
        else:
            self.TEntry3.bind('<Button-3>', lambda e: self. popup1(e,4))

    def popup1(self, event, *args, **kwargs):
        self.Popupmenu1 = tk.Menu(self.top, tearoff=0)
        self.Popupmenu1.configure(background=_bgcolor)
        self.Popupmenu1.configure(foreground=_fgcolor)
        self.Popupmenu1.configure(font="-family {DejaVu Sans} -size 10")
        self.Popupmenu1.add_command(command=lambda :sphinxDemo1_support.on_popCopy(args)
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='Copy')
        self.Popupmenu1.add_command(command=lambda :sphinxDemo1_support.on_popCut(args)
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='Cut')
        self.Popupmenu1.add_command(command=lambda :sphinxDemo1_support.on_popClear(args)
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='Clear')
        self.Popupmenu1.add_separator()
        self.Popupmenu1.add_command(command=lambda :sphinxDemo1_support.on_popPaste(args)
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='Paste')
        self.Popupmenu1.add_separator()
        self.Popupmenu1.add_command(command=lambda :sphinxDemo1_support.on_popCloseMenu(args)
                ,compound='left', font="-family {DejaVu Sans} -size 12"
                ,label='Close Menu')
        self.Popupmenu1.post(event.x_root, event.y_root)

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

def start_up():
    sphinxDemo1_support.main()

if __name__ == '__main__':
    sphinxDemo1_support.main()




